package Entities
{
	import Classes.ModelPropertyChangeEventKind;
	import Classes.ModelPropertyChangeEventType;
	import Classes.ModelSingleton;
	import Classes.StringUtils;
	
	import de.polygonal.ds.DLL;
	import de.polygonal.ds.DLLNode;
	
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	
	import mx.events.PropertyChangeEvent;
	
	
	public class ManetNodesTable implements  IEventDispatcher
	{
   		private var _dispatcher:EventDispatcher;		
		protected var _manetNodesDLL:DLL;
		
		/**
		 * @param manetNodesDLL:DLL, receives a list of nodes to initialize the own table of nodes
		 **/		
		public function ManetNodesTable(manetNodesDLL:DLL = null)
		{
			if (manetNodesDLL)
			{
				this._manetNodesDLL = DLL(manetNodesDLL.clone(false, null));	
			}
			else
			{
				this._manetNodesDLL = new DLL();
			}	
			_dispatcher = new EventDispatcher(this);
		}

		/**
		 * @returns ManetNodesTable, as a copy of the current table of nodes
		 **/
		public function clone():ManetNodesTable
		{
			var clonedManetNodesTable:ManetNodesTable = new ManetNodesTable(DLL(this._manetNodesDLL.clone(false, null)));
			return clonedManetNodesTable;
		}
	
		/**
		 * @changes, the table of nodes, removing all nodes
		 **/	
		public function clearAll():void
		{
			var oldValue:ManetNodesTable = ManetNodesTable(this.clone());
			this._manetNodesDLL = new DLL();
			var newValue:ManetNodesTable = ManetNodesTable(this.clone());
			var newPropertyChangeEventClearAll:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
					false, false, ModelPropertyChangeEventKind.CLEAR_MANET_NODES_TABLE, null, oldValue, newValue, this);
			this.dispatchEvent(newPropertyChangeEventClearAll);					
		}
		

		
		/**
		 * @param newManetNode:ManetNode, a ManetNode object to add to the list of nodes
		 * @param autoId:Boolean, true if the id for the new node has to be autogenerated, false otherwise
		 * @changes the table of nodes if the new ManetNode is added
		 * @returns String, the id assigned to the ManetNode added to the list, -1 if the operation fails
		 **/ 
		public function addManetNode(newManetNode:ManetNode, autoId:Boolean):String
		{
			if (autoId)
			{
				//Se añade el primer id libre al nodo
				newManetNode.id = this.getFirstFreeManetNodeId();
			}	
			
			//Se añade el nodo a la lista
			if (this._manetNodesDLL.isEmpty() == true)
			{
				this._manetNodesDLL.append(ManetNode(newManetNode.clone()));
				if (!ModelSingleton.getSingletonInstance().isLocked())
				{
					var newValue:ManetNode = ManetNode(newManetNode.clone());
					var newPropertyChangeEventAddEmpty:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
						false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE, null, null, newValue, this);	
					this.dispatchEvent(newPropertyChangeEventAddEmpty);
				}			
				return newManetNode.id;
			}
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while(iterNode)
			{	
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if (tempManetNode.id > newManetNode.id)
				{
					this._manetNodesDLL.insertBefore(iterNode, ManetNode(newManetNode.clone()));
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue2:ManetNode = ManetNode(newManetNode.clone());
						var newPropertyChangeEventAdd:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE, null, null, newValue2, this);
						this.dispatchEvent(newPropertyChangeEventAdd);
					}	
					return newManetNode.id;
					break;
				}	
				else
				{
					iterNode = iterNode.next;
				}
			}
			
			iterNode = this._manetNodesDLL.tail();
			if (ManetNode(iterNode.val).id < newManetNode.id)
			{
				this._manetNodesDLL.insertAfter(iterNode, ManetNode(newManetNode.clone()));
				if (!ModelSingleton.getSingletonInstance().isLocked())
				{				
					var newValueA:ManetNode = ManetNode(newManetNode.clone());
					var newPropertyChangeEventAddAppend:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
						false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE, null, null, newValueA, this);	
					this.dispatchEvent(newPropertyChangeEventAddAppend);						
				}
				return newManetNode.id;
			}
			
			return "-1";		
		}
		
		/**
		 * @param idNode:String, the id of the ManetNode to search
		 * @return ManetNode, a copy of the ManetNode found in the table, null otherwise
		 **/ 
		//Devuelve una copia del nodo
		public function getManetNode(idNode:String):ManetNode
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
			
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == idNode)
				{
					return ManetNode(tempManetNode.clone());
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;
		}
		
		/**
		 * @param idNode:String, the id of the ManetNode to search
		 * @return ManetNode, a reference of the ManetNode found in the table, null otherwise
		 **/ 		
		public function getManetNodeReference(idNode:String):ManetNode
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
			
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == idNode)
				{
					return tempManetNode;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;
		}			
		
		
		/**
		 * @param idNode:String, receives the id of the ManetNode to update in the list of nodes
		 * @param newManetNode:ManetNode, a ManetNode object to update an existing ManetNode in the table of nodes
		 * @changes The table of manet nodes updating it with the new ManetNode
		 * @returns Boolean, true if the node was update, false otherwise
		 **/
		//modifica un nodo existente, dado un id, y el nodo nuevo que sustituira al existente
		public function setManetNode(idNode:String, newManetNode:ManetNode):Boolean
		{
			//Se comprueba que el nodo exista y en tal caso se intercambia con el existente
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == idNode)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					var insertedManetNode:ManetNode = ManetNode(newManetNode.clone())
					insertedManetNode.id = idNode;
					iterNode.val = insertedManetNode;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(insertedManetNode.clone());
						var newPropertyChangeEventSet:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEventSet);
					}					
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}	
			return false;							
		}
		
		/**
		 * @returns Array, a collection of ids of the nodes in the table
		 **/ 
		//Devuelve un array con los id de los nodos almacenados
		public function getIdManetNodesArray():Array
		{
			var manetNodesArray:Array = new Array();
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				manetNodesArray.push(tempManetNode.id);
				iterNode = iterNode.next;	
			}			
			return manetNodesArray;
		}
		
		/**
		 * @param idNode:String, receives the id of the ManetNode to remove from the list of nodes
		 * @changes the table of nodes if the node is removed
		 * @returns Boolean, true if the node is removed from the list of nodes, false otherwise
		 **/ 
		public function removeManetNode(idNode:String):Boolean
		{
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if (tempManetNode.id == idNode)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					iterNode.remove();
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODESTABLE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.REMOVED_MANET_NODE, null, oldValue, null, this);
						this.dispatchEvent(newPropertyChangeEvent);	
					}					
					return true;
				}
				else
				{
					iterNode = iterNode.next;
				}				
			}
			return false;			
		}
		
		/**
		 * @returns String, the first randomly generated five characters long string id not in use in the table of nodes
		 **/ 
		protected function getFirstFreeManetNodeId():String
		{
			if (this._manetNodesDLL != null && this._manetNodesDLL.isEmpty() == false)
			{
				var newId:String = StringUtils.generateRandomString(5);
				var newIdIsInUse:Boolean = true;
				//Vamos incrementando el id
				while(newIdIsInUse)
				{
					var iterNode:DLLNode = this._manetNodesDLL.head();
				
					//recorremos todos los nodos existentes	
					while(iterNode)
					{
						var tempManetNode:ManetNode = ManetNode(iterNode.val);
						if(newId == tempManetNode.id)
						{
							newIdIsInUse = true;
							
							newId = StringUtils.generateRandomString(5);
							break;
						}
						else
						{
							iterNode = iterNode.next;	
						}
					}//end while interno
					//se salio del while sin encontrarlo, quiere decir que el id generado no está en uso
					newIdIsInUse = false;
										
				}//end while externo	
				return newId;
			}//end if
			else
			{
				return StringUtils.generateRandomString(5);
			}						

		}

		/**
		 * @returns String, the first randomly generated five characters long string id not in use in the table of nodes
		 **/   
  		protected function isNodeIdAlreadyInUse(theId:String):Boolean
  		{
			if (this._manetNodesDLL != null && this._manetNodesDLL.isEmpty() == false)
			{
				var theIdIsInUse:Boolean = false;
				//Vamos incrementando el id

					var iterNode:DLLNode = this._manetNodesDLL.head();
				
					//recorremos todos los nodos existentes	
					while(iterNode)
					{
						var tempManetNode:ManetNode = ManetNode(iterNode.val);
						if(theId == tempManetNode.id)
						{
							theIdIsInUse = true;
							break;
						}
						else
						{
							iterNode = iterNode.next;	
						}
					}//end while interno	
				return theIdIsInUse;
			}//end if  
			return false;			
  		}
  
  
     	//######################  IEVENTDISPATCHER INTERFACE ######################
	    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
	        _dispatcher.addEventListener(type, listener, useCapture, priority);
	    }
	           
	    public function dispatchEvent(evt:Event):Boolean{
	        return _dispatcher.dispatchEvent(evt);
	    }
	    
	    public function hasEventListener(type:String):Boolean{
	        return _dispatcher.hasEventListener(type);
	    }
	    
	    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
	        _dispatcher.removeEventListener(type, listener, useCapture);
	    }
	                   
	    public function willTrigger(type:String):Boolean {
	        return _dispatcher.willTrigger(type);
	    }














		
		//##############  INTERFACE FOR ACCESSING ManetNode METHODS  #################
		public function setManetNodeId(nodeId:String, newNodeId:String):Boolean
		{
			//FR
			var nodeIdInUse:Boolean = false;
			nodeIdInUse = this.isNodeIdAlreadyInUse(newNodeId);
			
			if (nodeIdInUse == false && this._manetNodesDLL.isEmpty() == true)
			//if (this.isNodeIdAlreadyInUse(newNodeId) == false && this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			}
			else if (nodeIdInUse == true && this._manetNodesDLL.isEmpty() == false){
				
				return false;
			}
			//FR
			else
			{
				var iterNode:DLLNode = this._manetNodesDLL.head();
				while (iterNode)
				{
					var tempManetNode:ManetNode = ManetNode(iterNode.val);
					if(tempManetNode.id == nodeId)
					{
						var oldValue:ManetNode = ManetNode(tempManetNode.clone());
						tempManetNode.id = newNodeId;
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{	
											
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_ID, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
							
						}					
						return true;
						break;
					}
					else
					{
						iterNode = iterNode.next;
					}
				}//end while
				return false;				
			}//end else
		}
		
		public function setManetNodeRange(nodeId:String, newRange:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					tempManetNode.range = newRange;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(tempManetNode.clone());
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_RANGE, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEvent);
					}					
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeRange(nodeId:String):int
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return -1;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.range;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return -1;		
		}
		
		public function setManetNodeColour(nodeId:String, newColour:String):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					tempManetNode.colour = newColour;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(tempManetNode.clone());
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_COLOUR, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEvent);	
					}			
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeColour(nodeId:String):String
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return "";
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.colour;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return "";		
		}
		
		public function setManetNodeDirection(nodeId:String, newDirection:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					tempManetNode.direction = newDirection;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(tempManetNode.clone());
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_DIRECTION, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEvent);	
					}			
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeDirection(nodeId:String):int
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return -1;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.direction;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return -1;		
		}
		
		public function setManetNodeName(nodeId:String, newName:String):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					tempManetNode.name = newName;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(tempManetNode.clone());
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_NAME, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEvent);	
					}			
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeName(nodeId:String):String
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return "";
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.name;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return "";		
		}
		
		public function setManetNodePattern(nodeId:String, newPattern:String):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					tempManetNode.pattern = newPattern;
					if (!ModelSingleton.getSingletonInstance().isLocked())
					{					
						var newValue:ManetNode = ManetNode(tempManetNode.clone());
						var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
							false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_PATTERN, null, oldValue, newValue, this);	
						this.dispatchEvent(newPropertyChangeEvent);	
					}		
					return true;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;				
		}
				
		public function getManetNodePattern(nodeId:String):String
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return "";
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.pattern;
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return "";				
		}


		
		public function setManetNodeState(nodeId:String, timestamp:Date, isSwitchedOn:Boolean, xCoord:int = -1, yCoord:int = -1, zCoord:int = -1):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if (tempManetNode.setManetNodeState(timestamp, isSwitchedOn, xCoord, yCoord, zCoord, true))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{	
							if(ModelSingleton.getSingletonInstance().scenarioPropertiesCallableProxy.tracesData==null){//FR
								
								var newValue:ManetNode = ManetNode(tempManetNode.clone());
								var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
									false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_STATE, null, oldValue, newValue, this);	
								this.dispatchEvent(newPropertyChangeEvent);
							
							}//FR
												
							
						}	
						return true;			
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeStateByTimestamp(nodeId:String, timestamp:Date):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getManetNodeStateByTimestamp(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodeState(nodeId:String, nodeStateId:int):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getManetNodeState(nodeStateId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;			
		}
		
		public function getManetNodeFirstState(nodeId:String):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getFirstNodeState();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;					
		}
		
		public function getManetNodeLastState(nodeId:String):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getLastNodeState();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;						
		}
		
		public function getManetNodeNextState(nodeId:String, nodeStateId:int):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getNextNodeState(nodeStateId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;						
		}
		
		public function getManetNodePreviousState(nodeId:String, nodeStateId:int):NodeState
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getPreviousNodeState(nodeStateId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;						
		}
		
		public function isManetNodeFirstState(nodeId:String, nodeStateId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					if (tempManetNode.getFirstNodeState().id == nodeStateId)
					{
						return true;
					}
					else
					{
						return false;
					}	
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;							
		}
		
		public function isManetNodeLastState(nodeId:String, nodeStateId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					if (tempManetNode.getLastNodeState().id == nodeStateId)
					{
						return true;
					}
					else
					{
						return false;
					}	
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;					
		}
		
		//args:
		//args[0] autoId:Boolean
		//args[1] id:int
		public function setManetNodeMovement(nodeId:String, timestampInit:Date, timestampEnd:Date, xCoordinateInit:int, yCoordinateInit:int, 
					xCoordinateEnd:int, yCoordinateEnd:int, trajectory:int, acceleration:int, ...args):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					
					var returnedValue:Boolean;
					
					if (args.length == 0)
					{
						returnedValue = tempManetNode.setMovement(timestampInit, timestampEnd, xCoordinateInit, yCoordinateInit, xCoordinateEnd, yCoordinateEnd, trajectory,
							acceleration, true);
					}
					else if (args.length == 1)
					{
										
						if (args[0] == true)
						{
							returnedValue = tempManetNode.setMovement(timestampInit, timestampEnd, xCoordinateInit, yCoordinateInit, xCoordinateEnd, yCoordinateEnd, trajectory,
								acceleration, args[0]);
						}
						else
						{
							return false;
						}	
					}
					else
					{
						returnedValue = tempManetNode.setMovement(timestampInit, timestampEnd, xCoordinateInit, yCoordinateInit, xCoordinateEnd, yCoordinateEnd, trajectory,
							acceleration, args[0], args[1]);
					}
					
					
					if(returnedValue)
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.SET_MANET_NODE_MOVEMENT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}	
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
					
		public function getManetNodeEstimatedTimestampPositionCheckpoint(nodeId:String, timestamp:Date):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getEstimatedTimestampPositionCheckpoint(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodeMovement(nodeId:String, movementId:int):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getMovement(movementId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;			
		}
		
		public function getManetNodeMovementByTimestamp(nodeId:String, timestamp:Date):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getMovementByTimestamp(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodeMovementByInitEnd(nodeId:String, timestampInit:Date, timestampEnd:Date):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getMovementByInitEnd(timestampInit, timestampEnd);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function isManetNodeFirstMovement(nodeId:String, movementId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					if (tempManetNode.getFirstMovement().id == movementId)
					{
						return true;
					}
					else
					{
						return false;
					}	
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;									 			
		}
		
		//Devuelve si el movimiento es el primero de un tramo de movimientos sin huecos de espacio dentro de un nodo
		public function isManetNodeFirstStretchMovement(nodeId:String, movementId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{		
					if (tempManetNode.getFirstMovement().id == movementId ||
					(tempManetNode.getMovement(movementId).fromTimestampPositionCheckpoint.xCoordinate 
					!= tempManetNode.getPreviousMovement(movementId).toTimestampPositionCheckpoint.xCoordinate
					&& tempManetNode.getMovement(movementId).fromTimestampPositionCheckpoint.yCoordinate 
					!= tempManetNode.getPreviousMovement(movementId).toTimestampPositionCheckpoint.yCoordinate))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;				
		}
		
		//Devuelve si el movimiento es el ultimo de un tramo de movimientos sin huecos de espacio dentro de un nodo
		public function isManetNodeLastStretchMovement(nodeId:String, movementId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.tail();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					if (tempManetNode.getLastMovement().id == movementId ||
					(tempManetNode.getMovement(movementId).toTimestampPositionCheckpoint.xCoordinate != 
					tempManetNode.getNextMovement(movementId).fromTimestampPositionCheckpoint.xCoordinate
					&& tempManetNode.getMovement(movementId).toTimestampPositionCheckpoint.yCoordinate != 
					tempManetNode.getNextMovement(movementId).fromTimestampPositionCheckpoint.yCoordinate))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					iterNode = iterNode.prev;
				}
			}
			return false;				
		}		
		
		public function isManetNodeLastMovement(nodeId:String, movementId:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					if (tempManetNode.getLastMovement().id == movementId)
					{
						return true;
					}
					else
					{
						return false;
					}	
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;		
		}		
		
		public function getManetNodeFirstMovement(nodeId:String):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getFirstMovement();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;				
		}
		
		public function getManetNodeLastMovement(nodeId:String):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getLastMovement();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;				
		}
		
		public function getManetNodeNextMovement(nodeId:String, movementId:int):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getNextMovement(movementId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;					
		}
		
		public function getManetNodePreviousMovement(nodeId:String, movementId:int):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getPreviousMovement(movementId);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;			
		}
		
		
		public function getManetNodeNextMovementByInitEnd(nodeId:String, timestampInit:Date, timestampEnd:Date):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getNextMovementByInitEnd(timestampInit, timestampEnd);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;				
		}
		
		public function getManetNodeTimestampPositionCheckpoint(nodeId:String, timestamp:Date):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.tail();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getTimestampPositionCheckpoint(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.prev;
				}
			}
			return null;						
		}
		
		public function getManetNodePreviousMovementByInitEnd(nodeId:String, timestampInit:Date, timestampEnd:Date):Movement
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.tail();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getPreviousMovementByInitEnd(timestampInit, timestampEnd);
					break;
				}
				else
				{
					iterNode = iterNode.prev;
				}
			}
			return null;			
		}
		
		
		public function getManetNodeFirstTimestampPositionCheckpoint(nodeId:String):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getFirstTimestampPositionCheckpoint();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodeLastTimestampPositionCheckpoint(nodeId:String):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getLastTimestampPositionCheckpoint();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodeNextTimestampPositionCheckpoint(nodeId:String, timestamp:Date):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getNextTimestampPositionCheckpoint(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		public function getManetNodePreviousTimestampPositionCheckpoint(nodeId:String, timestamp:Date):TimestampPositionCheckpoint
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getPreviousTimestampPositionCheckpoint(timestamp);
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;	
		}
		
		
		public function addManetNodeDoubleTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, xCoordinate:int, yCoordinate:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 

			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if (tempManetNode.addDoubleTimestampPositionCheckpoint(timestampArrival, timestampStart, xCoordinate, yCoordinate))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE_CHECKPOINT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;										
					}
					else
					{
						return false;
					}
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;								
		}
		
		
		public function addManetNodeExtremeTimestampPositionCheckpoint(nodeId:String, timestamp:Date, xCoordinate:int, yCoordinate:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.addExtremeTimestampPositionCheckpoint(timestamp, xCoordinate, yCoordinate))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE_CHECKPOINT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;					
		}

		public function addManetNodeDoubleIntermediateTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, xCoordinate:int, yCoordinate:int):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.addDoubleIntermediateTimestampPositionCheckpoint(timestampArrival, timestampStart, xCoordinate, yCoordinate))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.ADDED_MANET_NODE_CHECKPOINT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;					
		}
		
		
		public function updateManetNodeTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, newTimestampArrival:Date, newTimestampStart:Date, newXCoordinate:int, newYCoordinate:int,recalculatingTrajectories:Boolean):Boolean //FR
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.updateTimestampPositionCheckpoint(timestampArrival, timestampStart, newTimestampArrival, newTimestampStart, newXCoordinate, newYCoordinate))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.UPDATED_MANET_NODE_CHECKPOINT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;
										
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;						
		}
		
		public function removeManetNodeTimestampPositionCheckpoint(nodeId:String, timestamp:Date):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.removeTimestampPositionCheckpoint(timestamp))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.REMOVED_MANET_NODE_CHECKPOINT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;			
		}
		
		public function removeManetNodeMovementByTimestamp(nodeId:String, timestamp:Date):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.removeMovementByTimestamp(timestamp))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.REMOVED_MANET_NODE_MOVEMENT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function removeManetNodeMovement(nodeId:String, timestampInit:Date, timestampEnd:Date):Boolean
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.removeMovement(timestampInit, timestampEnd))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.REMOVED_MANET_NODE_MOVEMENT, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;				
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;	
		}
		
		public function getManetNodeTableSize():int
		{
			if (this._manetNodesDLL != null)
			{
				return this._manetNodesDLL.size();
			}
			else
			{
				return -1;
			}	
		}
	
		public function getManetNodeMovementsSize(nodeId:String):int
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return -1;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getManetNodeMovementsSize();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return -1;				
		}	

		public function getManetNodeStatesSize(nodeId:String):int
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return -1;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getManetNodeStatesSize();
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return -1;				
		}	
	
		public function getManetNodeIdStatesArray(nodeId:String):Array
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getIdNodeStatesArray();
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;				
		}	
		
		public function getManetNodeIdMovementsArray(nodeId:String):Array
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return null;
			} 
					
			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					return tempManetNode.getIdMovementsArray();
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return null;				
		}
		
/*****************************************************************************************************************************/
//FR

public function updateManetNodeState(nodeId:String,switchOn:Boolean,timestamp:Date, xPosition:int=-1, yPosition:int=-1, zPosition:int=-1):Boolean //FR
		{
			if (this._manetNodesDLL.isEmpty() == true)
			{
				return false;
			} 

			var iterNode:DLLNode = this._manetNodesDLL.head();
			while (iterNode)
			{
				var tempManetNode:ManetNode = ManetNode(iterNode.val);
				if(tempManetNode.id == nodeId)
				{
					var oldValue:ManetNode = ManetNode(tempManetNode.clone());
					if(tempManetNode.updateManetNodeState(switchOn,timestamp,xPosition,yPosition,zPosition))
					{
						if (!ModelSingleton.getSingletonInstance().isLocked())
						{						
							var newValue:ManetNode = ManetNode(tempManetNode.clone());
							var newPropertyChangeEvent:PropertyChangeEvent = new PropertyChangeEvent(ModelPropertyChangeEventType.MANETNODE_CHANGE_EVENT,
								false, false, ModelPropertyChangeEventKind.UPDATED_MANET_NODE_STATE, null, oldValue, newValue, this);	
							this.dispatchEvent(newPropertyChangeEvent);
						}	
						return true;
										
					}
					else
					{
						return false;
					}
					break;
				}
				else
				{
					iterNode = iterNode.next;
				}
			}
			return false;						
		}		
		
	}
}