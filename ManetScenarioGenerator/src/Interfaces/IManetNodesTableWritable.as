package Interfaces
{
	import Entities.ManetNode;	
	
	public interface IManetNodesTableWritable
	{
		/**
		 * @changes the table of ManetNode objects, removing all the elements
		 **/ 	
		function clearAll():void;
		
		/**
		 * @param newManetNode:ManetNode, a ManetNode object to add to the list of ManetNode objects
		 * @param autoId:Boolean, true if the id for the new ManetNode has to be autogenerated, false otherwise
		 * @changes the table of ManetNode objects if the new ManetNode is added
		 * @returns String, the id assigned to the ManetNode added to the list, -1 if the operation fails
		 **/ 
		function addManetNode(newManetNode:ManetNode, autoId:Boolean):String;
		
		
		/**
		 * @param idNode:String, the id of the ManetNode to search
		 * @return ManetNode, a reference of the ManetNode found in the table, null otherwise
		 **/ 		
		function getManetNodeReference(idNode:String):ManetNode;
		
		/**
		 * @param idNode:String, receives the id of the ManetNode to update in the list of ManetNode objects
		 * @param newManetNode:ManetNode, a ManetNode object to update an existing ManetNode in the table of ManetNode objects
		 * @changes The table of manet ManetNode objects updating it with the new ManetNode
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNode(idNode:String, newManetNode:ManetNode):Boolean;
		
		/**
		 * @param idNode:String, receives the id of the ManetNode to remove from the list of ManetNode objects
		 * @changes the table of ManetNode objects if the ManetNode is removed
		 * @returns Boolean, true if the ManetNode is removed from the list of ManetNode objects, false otherwise
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/ 		
		function removeManetNode(idNode:String):Boolean;
		
		/**
		 * @param idNode:String, the id of the ManetNode to update
		 * @param newIdNode:String, receives the value of the new id for the ManetNode 
		 * @changes the id of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodeId(idNode:String, newIdNode:String):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param newIdNode:String, receives the value of the new id for the ManetNode 
		 * @changes the id of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodeRange(nodeId:String, newRange:int):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param newColour:String, receives the value of the new colour for the ManetNode 
		 * @changes the colour of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodeColour(nodeId:String, newColour:String):Boolean;						
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param newDirection:int, receives the value of the new direction for the ManetNode 
		 * @changes the direction of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodeDirection(nodeId:String, newDirection:int):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param newName:String, receives the value of the new name for the ManetNode 
		 * @changes the name of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodeName(nodeId:String, newName:String):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param newPattern:String, receives the value of the new pattern for the ManetNode 
		 * @changes the pattern of the ManetNode is updated
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function setManetNodePattern(nodeId:String, newPattern:String):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode to update
		 * @param timestamp:Date, receives the value of the new time for the state
		 * @param isSwitchedOn:Boolean, receives the value for the switched on state property, false if the ManetNode is switched off, true if it is switched on
		 * @param xCoord:int, the x coordinate corresponding with the state
		 * @param yCoord:int, the y coordinate corresponding with the state
		 * @param zCoord:int, the z coordinate corresponding with the state
		 * @changes the list of states, adding a new node state
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/			
		function setManetNodeState(nodeId:String, timestamp:Date, isSwitchedOn:Boolean, xCoord:int = -1, yCoord:int = -1, zCoord:int = -1):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestampInit:Date, receives the start time instant of the movement
		 * @param timestampEnd:Date, receives the end time instant of the movement
		 * @param xCoordinateInit:int, receives the x-axis coordinate of the start
		 * @param yCoordinateInit:int, receives the y-axis coordinate of the start
		 * @param xCoordinateEnd:int, receives the x-axis coordinate of the end
		 * @param yCoordinateEnd:int, receives the y-axis coordinate of the end
		 * @param trajectory:int, receives the trajectory of the movement
		 * @param acceleration:int, receives the acceleration of the movement
		 * @param args[0]:Boolean, receives true if the id will be automatically generated, false otherwise
		 * @param args[1]:int, receives the id for the new movement (ignored if args[0] is false)
		 * @changes the list of movements, adding the movement
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/			
		function setManetNodeMovement(nodeId:String, timestampInit:Date, timestampEnd:Date, xCoordinateInit:int, yCoordinateInit:int, 
					xCoordinateEnd:int, yCoordinateEnd:int, trajectory:int, acceleration:int, ...args):Boolean;
					
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestampArrival:Date, receives the time of the previous checkpoint of the requested
		 * @param timestampStart:Date, receives the time of the previous checkpoint of the requested
		 * @param newTimestampArrival:Date, receives the time of the previous checkpoint of the requested
		 * @param newTimestampStart:Date, receives the time of the previous checkpoint of the requested
		 * @param newXCoordinate:int, receives the x-axis coordinate for the checkpoint to update
		 * @param newYCoordinate:int, receives the y-axis coordinate for the checkpoint to update
		 * @changes the list of movements, updating the movement corresponding with the provided timestamps
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/
		 //FR 		
		function updateManetNodeTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, newTimestampArrival:Date, newTimestampStart:Date, newXCoordinate:int, newYCoordinate:int, recalculatingTrajectories:Boolean):Boolean;
		//function updateManetNodeTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, newTimestampArrival:Date, newTimestampStart:Date, newXCoordinate:int, newYCoordinate:int):Boolean;
		//FR
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestampArrival:Date, receives the time instant of the checkpoint
		 * @param timestampStart:Date, receives the time instant of the checkpoint
		 * @param xCoordinate:int, receives the x-axis coordinate of the checkpoint
		 * @param yCoordinate:int, receives the y-axis coordinate of the checkpoint
		 * @changes the list of movements, adding or updating the checkpoint
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function addManetNodeDoubleTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, xCoordinate:int, yCoordinate:int):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestamp:Date, receives the time instant of the checkpoint
		 * @param xCoordinate:int, receives the x-axis coordinate of the checkpoint
		 * @param yCoordinate:int, receives the y-axis coordinate of the checkpoint
		 * @changes the list of movements, adding a movement starting at the point and time determinated by parameters
		 * and ending at the starting point of the first movement; or adding a movement ending at the point and time 
		 * determinated by parameters and starting at the ending point of the last movement
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/			
		function addManetNodeExtremeTimestampPositionCheckpoint(nodeId:String, timestamp:Date, xCoordinate:int, yCoordinate:int):Boolean;		
																			
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestampArrival:Date, receives the time of the arrival to the checkpoint
		 * @param timestampStart:Date, receives the time of start from the checkpoint
		 * @param xCoordinate:int, receives the x-axis coordinate of the checkpoint
		 * @param yCoordinate:int, receives the y-axis coordinate of the checkpoint
		 * @changes the list of movements, adding a movement based on the entered checkpoint, 
		 * and in cases modifying other existing movement
		 * @returns Boolean, true if the operation was successful, false otherwise
		 **/		
		function addManetNodeDoubleIntermediateTimestampPositionCheckpoint(nodeId:String, timestampArrival:Date, timestampStart:Date, xCoordinate:int, yCoordinate:int):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestamp:Date, receives a timestamp corresponding with the checkpoint to remove
		 * @changes the list of movements, removing a movement if exists, and updating movements if necessary
		 * @returns Boolean, true if the operation was succesful, false otherwise
		 **/ 		
		function removeManetNodeTimestampPositionCheckpoint(nodeId:String, timestamp:Date):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestamp:Date, the timestamp related to the checkpoint to be removed from the list of checkpoints
		 * @changes the list of movements, removing a movement if exists, and updating movements if necessary
		 * @returns Boolean, true if the movement was deleted from the list, false otherwise
		 **/		
		function removeManetNodeMovementByTimestamp(nodeId:String, timestamp:Date):Boolean;
		
		/**
		 * @param nodeId:String, the id of the ManetNode
		 * @param timestampInit:Date, the start timestamp of the movement to be removed
		 * @param timestampEnd:Date, the end timestamp of the movement to be removed
		 * @changes the list of movements, removing a movement if exists, and updating movements if necessary
		 * @returns Boolean, true if the movement was deleted from the list, false otherwise
		 **/		
		function removeManetNodeMovement(nodeId:String, timestampInit:Date, timestampEnd:Date):Boolean;
				
												
	}
}